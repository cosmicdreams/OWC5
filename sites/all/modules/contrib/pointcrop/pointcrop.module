<?php

/**
 * @file
 * Allows users to set a focus point for an image for use in cropping.
 */

/**
 * Include the image effects.
 */
require_once dirname(__FILE__) . '/pointcrop.effects.inc';

/**
 * Implements hook_permission().
 */
function pointcrop_permission() {
  return array(
    'set pointcrop focus point' => array(
      'title' => t('Set pointcrop focus point'),
      'description' => t('When editing content this allows the user to set a focus point for an uploaded image, which can be used when cropping the images for display.'),
    ),
  );
}

/**
 * Implements hook_field_info_alter().
 */
function pointcrop_field_info_alter(&$info) {
  $info['image']['instance_settings'] += array(
    'pointcrop_enabled' => 0,
    'pointcrop_image_style' => '',
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter field_ui_field_edit_form.
 */
function pointcrop_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if (($form['#field']['type'] == 'image') && pointcrop_widget_support($form['#instance']['widget']['type'])) {
    $settings = $form['#instance']['settings'];

    $additions['pointcrop_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Pointcrop focus settings'),
      '#collapsible' => TRUE,
      '#collapsed' => empty($settings['pointcrop_enabled']),
      '#parents' => array('instance', 'settings'),
      '#weight' => 17,
    );

    $additions['pointcrop_settings']['pointcrop_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable pointcrop'),
      '#default_value' => (!empty($settings['pointcrop_enabled'])) ? $settings['pointcrop_enabled'] : 0,
      '#description' => t('Enable a user-defined focus point for images.'),
    );

    $styles = image_styles();
    $options = array('' => t('None (original image)'));
    foreach ($styles as $key => $style) {
      $options[$key] = $style['name'];
    }
    $additions['pointcrop_settings']['pointcrop_image_style'] = array(
      '#type' => 'select',
      '#title' => t('Image style'),
      '#options' => $options,
      '#default_value' => (!empty($settings['pointcrop_image_style'])) ? $settings['pointcrop_image_style'] : '',
      '#description' => t('Select the image style to use when setting the focus point.'),
    );

    $form['instance']['settings'] += $additions;
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function pointcrop_field_widget_form_alter(&$element, &$form_state, $context) {
  $widget_type = $context['instance']['widget']['type'];
  if (!empty($context['instance']['settings']['pointcrop_enabled']) && pointcrop_widget_support($widget_type)) {
    foreach (element_children($element) as $delta) {
      $element[$delta]['#process'][] = 'pointcrop_widget_' . $widget_type . '_process';
    }
  }
}

/**
 * Element #process callback function; process widget type image_image.
 */
function pointcrop_widget_image_image_process($element, &$form_state, $form) {

  $item = $element['#value'];
  $field_name = $element['#field_name'];
  $instance = field_widget_instance($element, $form_state);
  $settings = $instance['settings'];

  if (user_access('set pointcrop focus point')) {
    // Add JS and CSS.
    // Add focus fields.
    $path = drupal_get_path('module', 'pointcrop');
    drupal_add_js( $path . '/pointcrop.js');
    drupal_add_css($path . '/pointcrop.css');

    // Add settings.
    static $added;
    if (!$added) {
      drupal_add_js(array(
        'pointcrop' => array(
          'path' => drupal_get_path('module', 'pointcrop'),
        ),
      ), 'setting');
      $added = TRUE;
    }

    $element['focus_point'] = array(
      '#type' => 'textfield',
      '#title' => t('Focus point'),
      '#default_value' => isset($item['focus_point']) ? $item['focus_point'] : '',
      '#description' => t('The focus point of the image. The point consists of x and y values of between 0 and 1.'),
      '#attributes' => array(
        'class' => array(
          'pointcrop',
          'focus-point',
        ),
      ),
      '#access' => (bool) $item['fid'],
    );

    // Add focus box.
    if ($element['#file']) {
      $uri = $element['#file']->uri;
      $info = (isset($element['#value']['width']) && isset($element['#value']['height'])) ? array(
        'width'  => $element['#value']['width'],
        'height' => $element['#value']['height'],
      ) : image_get_info($uri);

      if (is_array($info)) {
        $element['focus_box'] = array(
          '#markup' => '<div class="pointcrop focus-box"><div class="img-wrapper"><img class="uploaded-image" src="' . ($settings['pointcrop_image_style'] ? image_style_url($settings['pointcrop_image_style'], $uri) : file_create_url($uri)) . '" alt="' . $info['width'] . 'x' . $info['height'] . '" style="display:none;" /></div></div>',
        );
      }
    }

    $element['#element_validate'][] = 'pointcrop_widget_validate';
  }
  else {
    $element['focus_point'] = array(
      '#type' => 'value',
      '#value' => isset($item['focus_point']) ? $item['focus_point'] : '',
    );
  }

  return $element;
}

/**
 * Element #element_validate callback function.
 */
function pointcrop_widget_validate($element, &$form_state, $form) {
  foreach (array('focus_point') as $key) {
    if (isset($element['#value'][$key])) {
      $value = trim($element['#value'][$key]);
      if (empty($value)) {
        form_error($element[$key], t('You must set a focus point for the image. You can do so by clicking the image where the focus point should be.'));
      }
      elseif (!pointcrop_parse($value)) {
        form_error($element[$key], t('The specified point value is invalid. The x and y values must both be a number between 0 and 1.'));
      }
    }
  }
}

/**
 * Implements hook_field_attach_insert().
 */
function pointcrop_field_attach_insert($entity_type, $entity) {
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);

  foreach (field_info_instances($entity_type, $bundle) as $instance) {
    if (!empty($instance['settings']['pointcrop_enabled']) && pointcrop_widget_support($instance['widget']['type'])) {
      $field_name = $instance['field_name'];
      $field = field_info_field($field_name);
      $available_languages = field_available_languages($entity_type, $field);
      $languages = _field_language_suggestion($available_languages, NULL, $field_name);

      foreach ($languages as $langcode) {
        $items = isset($entity->{$field_name}[$langcode]) ? $entity->{$field_name}[$langcode] : array();
        foreach ($items as $item) {
          $file = (object) $item;
          $file->uri = file_load($file->fid)->uri;
          _pointcrop_file_save($file);
        }
      }
    }
  }
}

/**
 * Implements hook_field_attach_update().
 */
function pointcrop_field_attach_update($entity_type, $entity) {
  pointcrop_field_attach_insert($entity_type, $entity);
}

/**
 * Implements hook_file_insert().
 */
function pointcrop_file_insert($file) {
  _pointcrop_file_save($file);
}

/**
 * Implements hook_file_update().
 */
function pointcrop_file_update($file) {
  _pointcrop_file_save($file);
}

/**
 * Implements hook_file_delete().
 */
function pointcrop_file_delete($file) {
  _pointcrop_file_delete($file);
}

/**
 * Implements hook_query_TAG_alter(); alter queries tagged with file_load_multiple.
 */
function pointcrop_query_file_load_multiple_alter(QueryAlterableInterface $query) {
  $query->fields('iff', array('focus_point'));
  $query->leftJoin('pointcrop_file', 'iff', 'iff.fid = base.fid');
}

/**
 * Save focus point data.
 */
function _pointcrop_file_save($file) {
  if (empty($file->focus_point)) {
    $affected = _pointcrop_file_delete($file);
  }
  else {
    $status = db_merge('pointcrop_file')
      ->key(array('fid' => $file->fid))
      ->fields(array(
        'focus_point' => $file->focus_point,
      ))
      ->execute();
    // TODO: Should only flush when focus data has changed.
    $affected = TRUE;
  }

  if ($affected) {
    image_path_flush($file->uri);
  }
}

/**
 * Delete focus point data.
 */
function _pointcrop_file_delete($file) {
  return db_delete('pointcrop_file')->condition('fid', $file->fid)->execute();
}

/**
 * Add a pointcrop value to a file.
 *
 * @param $file
 *   An x,y coordinate string.
 *
 * @return
 *   An x,y ratio string.
 */
function pointcrop_convert_to_ratio(&$file) {
  $point = pointcrop_parse($file->focus_point);
  $ratio = array(
    round($point['x'] / $file->width, 8),
    round($point['y'] / $file->height, 8),
  );
  $file->focus_ratio = implode(',', $ratio);
}

/**
 * Parse a point from a given string.
 *
 * @param $point
 *   An x,y coordinate string. Each value is a number between 0 and 1.
 *
 * @return
 *   A point array or FALSE.
 */
function pointcrop_parse($point) {
  $values = explode(',', $point);
  if (count($values) != 2) {
    return FALSE;
  }
  foreach ($values as $value) {
    if ($value < 0 || $value > 1) {
      return FALSE;
    }
  }
  $point = array(
    'x' => $values[0],
    'y' => $values[1],
  );

  return $point;
}

/**
 * Return whether or not pointcrop has support for the given widget.
 */
function pointcrop_widget_support($type) {
  return function_exists('pointcrop_widget_' . $type . '_process');
}

/**
 * Implements hook_form_media_edit_alter().
 * Add pointcrop to media edit form.
 *  
 * The 7.x-2.x branch of media module has renamed this function,
 * this function is necessary to work with the 7.x-1.x branch.
 * Other than the hook name, functionality is the same, so 
 * to ensure compatibility with both, this simply passes calls
 * off to the 7.x-2.x hook.
 */
function pointcrop_form_media_edit_alter(&$form, $form_state) {
  pointcrop_form_file_entity_edit_alter($form, $form_state);
}

/**
 * Implements hook_form_file_entity_edit_alter().
 * Add pointcrop to file_entity edit form.
 */
function pointcrop_form_file_entity_edit_alter(&$form, $form_state) {
  if (isset($form['preview']['#file']) && $form['preview']['#file']->type == 'image') {
    if (user_access('set pointcrop focus point')) {
      // Add JS and CSS.
      // Add focus fields.
      $path = drupal_get_path('module', 'pointcrop');
      drupal_add_js($path . '/pointcrop.js');
      drupal_add_css($path . '/pointcrop.css');

      // Add settings.
      static $added;
      if (!$added) {
        drupal_add_js(array(
          'pointcrop' => array(
            'path' => drupal_get_path('module', 'pointcrop'),
          ),
        ), 'setting');
        $added = TRUE;
      }

      $form['focus_point'] = array(
        '#type' => 'textfield',
        '#title' => t('Focus point'),
        '#default_value' => isset($form['preview']['#file']->focus_point) ? $form['preview']['#file']->focus_point : '',
        '#description' => t('The focus point of the image. The point consists of x and y values of between 0 and 1. For example: 0.53636364,0.78181818'),
        '#attributes' => array(
          'class' => array(
            'pointcrop',
            'focus-point',
          ),
        ),
        '#access' => (bool) $form['preview']['#file']->fid,
      );
      if (isset($form['preview']['#file']->image_dimensions)) {
        $form['focus_box'] = array(
          '#markup' => '<div class="pointcrop focus-box"><div class="img-wrapper"><img class="uploaded-image" src="' . file_create_url($form['preview']['#file']->uri) . '" alt="' . $form['preview']['#file']->image_dimensions['width'] . 'x' . $form['preview']['#file']->image_dimensions['height'] . '" style="display:none;" /></div></div>',
        );
      }
      else {
        $form['focus_box'] = array(
          '#markup' => '<div class="pointcrop focus-box"><div class="img-wrapper"><img class="uploaded-image" src="' . file_create_url($form['preview']['#file']->uri) . '" alt="" style="display:none;" /></div></div>',
        );
      }
    }
  }
}
